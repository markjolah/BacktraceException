# Mark J. Olah (mjo@cs.unm DOT edu)
# Copyright 2014-2017
# Licensed under the Apache License, Version 2.0
# https://www.apache.org/licenses/LICENSE-2.0
# See: LICENCE file
#
# FixupTargetDependenciesScript.cmake.in -
# This is a template file for use by the fixup_dependencies() function.
# This scripts is configured and to be executed at install-time to copy necessary dependencies from the system and other
# sources into the local install-tree of one or more targets
#

cmake_minimum_required(VERSION 3.7)
set(target @FIXUP_TARGET@)
set(project_name @PROJECT_NAME@)
set(install_prefix ${CMAKE_INSTALL_PREFIX}) #this should be set at install time

set(target_file_name $<TARGET_FILE_NAME:@FIXUP_TARGET@>)
set(target_build_dir $<TARGET_FILE_DIR:@FIXUP_TARGET@>)
message(STATUS "[fixup_dependencies:install_phase] target_file:${target_file_name} target_build_dir:${target_build_dir}")
#relative directory path from ${CMAKE_INSTALL_PREFIX} that target will be installed to
set(target_destination @FIXUP_TARGET_DESTINATION@)
if(NOT target_destination)
    #try to find installed file
    find_file(${target}_install_file ${target_file_name} PATHS ${install_prefix} PATH_SUFFIXES lib  lib/${project_name} NO_DEFAULT_PATH)
    if(${${target}_install_file} STREQUAL "${target}_install_file-NOTFOUND")
        message(FATAL_ERROR "Could not find installed location for target fixup file:${target_file_name} under install dir: ${install_prefix}")
    endif()
    message(STATUS "Fixing up target_install_file:${${target}_install_file}")
    get_filename_component(target_install_dir ${${target}_install_file} DIRECTORY)
    file(RELATIVE_PATH target_destination ${install_prefix} "${target_install_dir}")
endif()
message(STATUS "[fixup_dependencies:install_phase] install_prefix:${install_prefix} target_destination:${target_destination}")
set(target_install_dir ${install_prefix}/${target_destination})
set(target_install_file ${target_install_dir}/${target_file_name})
set(lib_dest ${target_install_dir}/@FIXUP_COPY_RPATH@)
message(STATUS "lib_dest: ${lib_dest}")
get_filename_component(lib_dest ${lib_dest} REALPATH)
set(search_dirs "@FIXUP_LIB_SEARCH_PATHS@")
set(system_dirs "@FIXUP_LIB_SYSTEM_PATHS@")

set(RECURSE 1)
if(@TARGET_OS@ STREQUAL LINUX)
    message(STATUS "TARGET_OS:@TARGET_OS@ CROSS?:${CMAKE_CROSSCOMPILING}")
    set(gp_tool "ldd")
    set(EXCLUDE_SYSTEM_LIBS 0)
    list(APPEND system_dirs /lib /lib64)
    set(system_libs libgcc_s)
elseif(@TARGET_OS@ STREQUAL WIN64)
    set(gp_tool "objdump")
    set(EXCLUDE_SYSTEM_LIBS 1)
    set(system_libs kernel32.dll user32.dll msvcrt.dll advapi32.dll)
endif()

message(STATUS "FIXUP TARGET: ${target_file_name}")
message(STATUS "  target_file_name=${target_file_name}")
message(STATUS "  target_build_dir=${target_build_dir}")
message(STATUS "  target_destination=${target_destination}")
message(STATUS "  target_install_dir=${target_install_dir}")
message(STATUS "  target_install_file=${target_install_file}")
message(STATUS "  lib_dest=${lib_dest}")
message(STATUS "  search_dirs=${search_dirs}")
message(STATUS "  system_dirs=${system_dirs}")
message(STATUS "  system_libs=${system_libs}")


function(gp_resolve_item_override context item exepath dirs resolved_item_var resolved_var)
    if(@TARGET_OS@ STREQUAL WIN64)
        string(TOLOWER ${item} item)
        list(FIND system_libs ${item} system_libs_idx)
        if(NOT system_libs_idx EQUAL -1)
            message("Auto-resolving system lib ${item} ")
            set(${resolved_item_var} /system/${item} PARENT_SCOPE)
            set(${resolved_var} 1 PARENT_SCOPE)
        endif()
    endif()
endfunction()

function(gp_resolved_file_type_override resolved_file type)
    get_filename_component(file_dir ${resolved_file} DIRECTORY)
    get_filename_component(file_name ${resolved_file} NAME)
    if(@TARGET_OS@ STREQUAL WIN64)
        string(TOLOWER ${file_name} file_name)
    endif()
    list(FIND system_dirs ${file_dir} system_dir_idx)
    list(FIND system_libs ${file_name} system_lib_idx)
    message(STATUS Dir: ${file_dir} Name: ${file_name} SysDir: ${system_dir_idx} SysName: ${system_lib_idx} type: ${type})
    if(NOT system_dir_idx EQUAL -1 OR NOT system_lib_idx EQUAL -1)
        message("Resolving ${item} type as system")
        set(${type} system PARENT_SCOPE)
    endif()
endfunction()

include(GetPrerequisites)
get_prerequisites(${target_install_file} deps ${EXCLUDE_SYSTEM_LIBS} ${RECURSE} "" "${search_dirs};${system_dirs}")
message(STATUS "TARGET_OS= @TARGET_OS@")
message(STATUS "gp_tool=${gp_tool}")
message(STATUS "deps=${deps}")

foreach(dep IN LISTS deps)
    gp_resolve_item(${target_install_file} ${dep} "" "${search_dirs};${ignore_dirs}" resolved_dep)
    message(STATUS "Working on dep: ${dep} Using: ${resolved_dep}")
    get_filename_component(dep_dir ${resolved_dep} DIRECTORY)
    get_filename_component(dep_name ${resolved_dep} NAME)
    get_filename_component(dep_base_name ${resolved_dep} NAME_WE)
    message(STATUS " dep_dir:${dep_dir}")
    message(STATUS " dep_name:${dep_name}")
    message(STATUS " dep_base_name:${dep_base_name}")
    list(FIND system_dirs ${dep_dir} system_dir_idx)
    list(FIND system_names ${dep_base_name} system_name_idx)
    message(STATUS " ignore_dir:${ignore_dir}")
    message(STATUS " ignore_name:${ignore_name}")
    message(STATUS " ignore dirs:${ignore_dirs}")

    if(system_dir_idx EQUAL -1 AND system_name_idx EQUAL -1)
        set(dest_name ${lib_dest}/${dep_name})
        if(EXISTS ${dest_name})
            message(STATUS "  === Already Present: ${dep_name}")
        else()
            get_filename_component(real_dep ${resolved_dep} REALPATH)
            execute_process(COMMAND ${CMAKE_COMMAND} -E copy ${real_dep} ${dest_name})
            message(STATUS "  +++ Copying:  ${real_dep} --> ${dest_name}")
        endif()
    else()
        message(STATUS "  --- Ignoring: ${dep_name}")
    endif()
endforeach()

