# Mark J. Olah (mjo@cs.unm DOT edu)
# Copyright 2014-2017
# Licensed under the Apache License, Version 2.0
# https://www.apache.org/licenses/LICENSE-2.0
# See: LICENCE file
#
# FixupBuildTargetDependenciesScript.cmake.in -
# This is a template file for use by the fixup_dependencies() function.
# This scripts is configured and to be executed at build-time to copy necessary dependencies from the system and other
# sources into the local build-tree of a target
#
cmake_minimum_required(VERSION 3.7)

set(project_name @PROJECT_NAME@)
set(fixup_target @FIXUP_TARGET@)

set(target_file_name $<TARGET_FILE_NAME:@FIXUP_TARGET@>)
set(target_build_dir $<TARGET_FILE_DIR:@FIXUP_TARGET@>)
set(target_build_file ${target_build_dir}/${target_file_name})
set(install_prefix @CMAKE_INSTALL_PREFIX@)
get_filename_component(lib_copy_dest ${target_build_dir} ABSOLUTE) #Destination for libraries to copy in

set(msg_hdr "[fixup_dependencies:build_tree] [${fixup_target}]")
message(STATUS "${msg_hdr}: file name:${target_file_name}")
message(STATUS "${msg_hdr}: build dir:${target_build_dir}")
message(STATUS "${msg_hdr}: build file:${target_build_file}")

function(transform_filename_component_list list_name component)
    list(LENGTH ${list_name} ndirs)
    math(EXPR niter "${ndirs} - 1")
    set(_new_list)
    if(niter GREATER_EQUAL 0)
        foreach(idx RANGE ${niter})
            list(GET ${list_name} ${idx} _dir)
            get_filename_component(_c ${_dir} ${component})
            list(APPEND _new_list ${_c})
        endforeach()
    endif()
    set(${list_name} ${_new_list} PARENT_SCOPE)
endfunction()

function(read_rpath out_var target tag)
    get_filename_component(_target_dir ${target} DIRECTORY)
    set(${out_var} False PARENT_SCOPE) #default to false
    if(NOT IS_ABSOLUTE ${target} OR NOT IS_DIRECTORY ${_target_dir})
        message(WARNING "${msg_hdr} target: ${target} not absolute or dir:${_target_dir} not found.")
        return()
    endif()
    if(target_os STREQUAL WIN32)
        message(WARNING "${msg_hdr} runpath does not exist on WIN32.")
        return()
    endif()
    execute_process(COMMAND readelf -d ${target} RESULT_VARIABLE _ret OUTPUT_VARIABLE _out ERROR_VARIABLE _err)
    if(NOT _ret EQUAL 0)
        message(WARNING "${msg_hdr} Could not readelf on ${target}. ret:${_ret} out:${_out} err:${_err}")
        return()
    endif()
    if(_out MATCHES "\\(?${tag}\\)?[ \t]+[A-Za-z ]+:[ \t]*\\[([^\]]+)\\][ \t\r]*\n")
        set(_dirs ${CMAKE_MATCH_1})
        string(REGEX REPLACE "\\$\\(?ORIGIN\\)?" ${_target_dir} _dirs "${_dirs}")
        string(REGEX REPLACE ":" ";" _dirs "${_dirs}")
        message(STATUS "_dirs:${_dirs}")
        set(_abs_dirs)
        foreach(_dir IN LISTS _dirs)
            if(_dir)
                get_filename_component(_dir "${_dir}" ABSOLUTE)
                list(APPEND _abs_dirs ${_dir})
            endif()
        endforeach()
        set(${out_var} ${_abs_dirs} PARENT_SCOPE)
    endif()
endfunction()

function(read_direct_dependencies out_var target)
    get_filename_component(_target_dir ${target} DIRECTORY)
    set(${out_var} False PARENT_SCOPE) #default to false
    if(NOT IS_ABSOLUTE ${target} OR NOT IS_DIRECTORY ${_target_dir})
        message(WARNING "${msg_hdr} target: ${target} not absolute or dir:${_target_dir} not found.")
        return()
    endif()
    if(${target_os} STREQUAL UNIX)
        execute_process(COMMAND readelf -d ${target} RESULT_VARIABLE _ret OUTPUT_VARIABLE _out ERROR_VARIABLE _err)
        if(NOT _ret EQUAL 0)
            message(WARNING "${msg_hdr} Could not readelf on ${target}. ret:${_ret} out:${_out} err:${_err}")
            return()
        endif()
        string(REPLACE "\n" ";" _out "${_out}")
        set(_needed)
        foreach(_line IN LISTS _out)
            if(_line MATCHES "\\(?NEEDED\\)?[ \t]+[A-Za-z ]+:[ \t]*\\[([^\]]+)\\][ \t\r]*")
                list(APPEND _needed ${CMAKE_MATCH_1})
            endif()
        endforeach()
        set(${out_var} "${_needed}" PARENT_SCOPE)
    elseif(${target_os} STREQUAL WIN32)
        execute_process(COMMAND objdump -p ${target} COMMAND grep -i "DLL Name"  RESULT_VARIABLE _ret OUTPUT_VARIABLE _out ERROR_VARIABLE _err)
        if(NOT _ret EQUAL 0)
            message(WARNING "${msg_hdr} Could not objdump on ${target}. ret:${_ret} out:${_out} err:${_err}")
            return()
        endif()
        string(REPLACE "\n" ";" _out "${_out}")
        set(_needed)
        foreach(_line IN LISTS _out)
            if(_line MATCHES "DLL Name:[ \t]+([A-Za-z0-9\._+\-]+\\.[dD][lL][lL])")
                list(APPEND _needed ${CMAKE_MATCH_1})
            endif()
        endforeach()
        set(${out_var} "${_needed}" PARENT_SCOPE)
    endif()
endfunction()

set(target_link_libraries @FIXUP_BUILD_TARGET_LINK_DIRECTORIES@)

set(parent_lib "@FIXUP_PARENT_LIB@")

set(provided_lib_dirs @FIXUP_PROVIDED_LIB_DIRS@)
transform_filename_component_list(provided_lib_dirs REALPATH)
set(provided_libs @FIXUP_PROVIDED_LIBS@)

set(crosscompiling @CMAKE_CROSSCOMPILING@)
set(toolchain_file @CMAKE_TOOLCHAIN_FILE@)
set(target_os @FIXUP_TARGET_OS@)

set(staging_prefix @CMAKE_STAGING_PREFIX@)
if(staging_prefix)
    get_filename_component(staging_prefix ${staging_prefix} REALPATH)
endif()

set(find_root_path @CMAKE_FIND_ROOT_PATH@)
if(find_root_path)
    transform_filename_component_list(find_root_path REALPATH)
endif()

set(sysroot @CMAKE_SYSROOT@)
if(sysroot)
    get_filename_component(sysroot ${sysroot} REALPATH)
endif()

set(search_lib_dirs @FIXUP_SEARCH_LIB_DIRS@)
if(search_lib_dirs)
    transform_filename_component_list(search_lib_dirs REALPATH)
endif()

set(default_library_search_suffixs @FIXUP_DEFAULT_LIBRARY_SEARCH_SUFFIXS@)

message(STATUS "${msg_hdr}: target_link_libraries:${target_link_libraries}")
message(STATUS "${msg_hdr} parent_lib: ${parent_lib}")
message(STATUS "${msg_hdr} lib_copy_dest: ${lib_copy_dest}")
message(STATUS "${msg_hdr} provided_lib_dirs: ${provided_lib_dirs}")
message(STATUS "${msg_hdr} provided_libs: ${provided_libs}")
message(STATUS "${msg_hdr} search_lib_dirs: ${search_lib_dirs}")
message(STATUS "${msg_hdr} find_root_path: ${find_root_path}")
message(STATUS "${msg_hdr} default_library_search_suffixs: ${default_library_search_suffixs}")
message(STATUS "${msg_hdr} crosscompiling: ${crosscompiling}")
message(STATUS "${msg_hdr} target_os: ${target_os}")

#Called by a parent with an RPATH and no RUNPATH
function(fixup_unix_target target)
    get_property(_complete_targets GLOBAL PROPERTY FIXUP_COMPLETE_TARGETS)
    if(${target} IN_LIST _complete_targets)
        message(STATUS "  ^^^ Already fixedup target: ${target}")
        return()
    else()
        set_property(GLOBAL APPEND PROPERTY FIXUP_COMPLETE_TARGETS ${target})
    endif()

    if(ARGC GREATER_EQUAL 2)
        set(_parent_rpath ${ARGV1})
    else()
        set(_parent_rpath)
    endif()
    get_filename_component(_name ${target} NAME)
    get_filename_component(_dir ${target} DIRECTORY)

    read_rpath(_target_rpath ${target} RPATH)
    read_rpath(_target_runpath ${target} RUNPATH)
    if(_target_runpath)
        set(_rpath)
        set(_runpath ${_target_runpath})
    elseif(_target_rpath)
        set(_rpath ${_target_rpath} ${_parent_rpath}) #recursive rpaths if parent also used rpath. Even if we have not _target_rpath this is correct
        set(_runpath)
    else()
        set(_rpath ${_parent_rpath}) #recursive rpaths if parent also used rpath. Even if we have not _target_rpath this is correct
        set(_runpath)
    endif()
    read_direct_dependencies(_deps ${target})

    message(STATUS ">>> [fixup_unix_target:${_name}]: dir: ${_dir}")

    #Helper function to do the copy and recursion. We recuse whenever we copy.
    #Recursion happens on the copied library location so that it's dependencies are found as they would be when it
    # is loaded from the new directory (vs. the old one).
    macro(_do_copy_recurse)
        execute_process(COMMAND cp ${fitem} ${lib_copy_dest})
        message(STATUS "  &&& >>> Copying [Build Tree]:  ${fitem} --> ${lib_copy_dest}")
        unset(fitem CACHE)
        fixup_unix_target(${lib_copy_dest}/${_dep} "${_rpath}")
    endmacro()

    macro(_do_recurse)
        set(_recurse_item ${fitem})
        unset(fitem CACHE)
        fixup_unix_target(${_recurse_item} "${_rpath}") #Rpath will expand as empty if it is not used
        unset(_recurse_item)
    endmacro()

    foreach(_dep IN LISTS _deps)
        set(msg_hdr "{Dep:${_dep}}")
        get_filename_component(_dep_base_name ${_dep} NAME_WE)

        #check if dep_base_name is in provided_libs. These are assumed to be in the RPATH or LD_LIBRARY_PATH.
        #Don't recurse.  These are assumed linked correctly.
        if(provided_libs AND ${_dep_base_name} IN_LIST provided_libs)
            message(STATUS "  *** ${msg_hdr}: Vendor provided library name: ${_dep_base_name}")
            continue()
        endif()

        #Find in vendor provided_libs These are assumed to be in the RPATH or LD_LIBRARY_PATH.
        #Don't recurse.  These are assumed linked correctly.
        if(provided_lib_dirs)
            find_file(fitem ${_dep} PATHS ${provided_lib_dirs} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
            if(fitem)
                get_filename_component(resolved_dir ${fitem} DIRECTORY)
                message(STATUS "  *** ${msg_hdr}: In vendor provided lib dir: ${resolved_dir}")
                unset(fitem CACHE)
                continue()
            endif()
        endif()

        #Check RPATH if target did not have RUNPATH set.  _rpath will include recursive rpaths
        if(_rpath)
            find_file(fitem ${_dep} PATHS ${_rpath} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
            if(fitem)
                get_filename_component(resolved_dir ${fitem} DIRECTORY)
                message(STATUS "  --- ${msg_hdr}: Exists under rpath at: ${resolved_dir}")
                _do_recurse()
                continue()
            endif()
        endif()

        #check if target is in lib_copy_dest (COPY_DESTINATION) already - Do not copy
        #don't recurse.  These are assumed already fixed-up.
        find_file(fitem ${_dep} PATHS ${lib_copy_dest} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if(fitem)
            message(STATUS "  --- ${msg_hdr}: Exists at lib copy dest: ${lib_copy_dest}")
            unset(fitem CACHE)
            continue()
        endif()

        #install_prefix - and also not in rpath - recurse.
        find_file(fitem ${_dep} PATHS ${install_prefix} PATH_SUFFIXES ${default_library_search_suffixs} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if(fitem)
            get_filename_component(resolved_dir ${fitem} DIRECTORY)
            message(STATUS "  &&& ${msg_hdr}: Exists under install prefix at: ${resolved_dir}")
            _do_copy_recurse()
            continue()
        endif()

        #staging_prefix - don't copy.  We assume this will be merged with install_prefix and in LD_LIBRARY_PATH
        if(staging_prefix)
            find_file(fitem ${_dep} PATHS ${staging_prefix} PATH_SUFFIXES ${default_library_search_suffixs} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
            if(fitem)
                get_filename_component(resolved_dir ${fitem} DIRECTORY)
                message(STATUS "  &&& ${msg_hdr}: Exists under staging prefix at: ${resolved_dir}")
                _do_copy_recurse()
                continue()
            endif()
        endif()

        #SEARCH_LIB_DIRS - Copy and recurse.  These are necessary dependent libraries built with a compatabile toolchain for target_os.
        # These are directories which are not normally on the LD_LIBRARY_PATH on the target system or not availbile, so we need to copy.
        if(search_lib_dirs)
            find_file(fitem ${_dep} PATHS ${search_lib_dirs} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
            if(fitem)
                get_filename_component(resolved_dir ${fitem} DIRECTORY)
                message(STATUS "  &&& ${msg_hdr}: Exists under search_lib_dirs at: ${resolved_dir}")
                _do_copy_recurse()
                continue()
            endif()
        endif()

        #CMAKE_FIND_ROOT_PATH - Copy and recurse.  These are necessary dependent libraries built with a compatabile toolchain for target_os
        # These are directories which are not normally on the LD_LIBRARY_PATH or availile on the target system so we need to copy.
        if(crosscompiling)
            find_file(fitem ${_dep} PATHS @CMAKE_FIND_ROOT_PATH@ PATH_SUFFIXES ${default_library_search_suffixs} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
            if(fitem)
                get_filename_component(resolved_dir ${fitem} DIRECTORY)
                message(STATUS "  &&& ${msg_hdr}: Exists under CMAKE_FIND_ROOT_PATH at: ${resolved_dir}")
                _do_copy_recurse()
                continue()
            endif()
        endif()

        #Check RUNPATH if has RUNPATH set.  _rpath will be ignored. Don't copy. Do recurse.
        if(_runpath)
            find_file(fitem ${_dep} PATHS ${_runpath} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
            if(fitem)
                get_filename_component(resolved_dir ${fitem} DIRECTORY)
                message(STATUS "  --- ${msg_hdr}: Exists under runpath at: ${resolved_dir}")
                _do_recurse()
                continue()
            endif()
        endif()

        #sysroot - Copy if not already on rpath.
        if(sysroot)
            find_file(fitem ${_dep} PATHS ${sysroot} PATH_SUFFIXES ${default_library_search_suffixs} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
            if(fitem)
                get_filename_component(resolved_dir ${fitem} DIRECTORY)
                message(STATUS "  &&& ${msg_hdr}: Exists under sysroot prefix at: ${resolved_dir}")
                _do_copy_recurse()
                continue()
            endif()
        endif()

        #Check host system #don't recurse.  These are assumed already fixed-up.
        if(NOT crosscompiling)
            find_file(fitem ${_dep} PATH_SUFFIXES ${default_library_search_suffixs} NO_CMAKE_FIND_ROOT_PATH)
            if(fitem)
                get_filename_component(resolved_dir ${fitem} DIRECTORY)
                message(STATUS "  ... ${msg_hdr}: Exists under system dir at: ${resolved_dir}.")
                unset(fitem CACHE)
                continue()
            endif()
        endif()
        message(FATAL_ERROR "  XXX ${msg_hdr}: Could not find dependency ${_dep} of target ${_name} from dir:${_dir} rpath:${_rpath} runpath:${_runpath}")
    endforeach()
    message(STATUS "  ===> [fixup_unix_target:${_name}] Complete.")
endfunction()


function(fixup_win32_target target)
    get_property(_complete_targets GLOBAL PROPERTY FIXUP_COMPLETE_TARGETS)
    if(${target} IN_LIST _complete_targets)
        message(STATUS "  ^^^ Already fixedup target: ${target}")
        return()
    else()
        set_property(GLOBAL APPEND PROPERTY FIXUP_COMPLETE_TARGETS ${target})
    endif()

    get_filename_component(_name ${target} NAME)
    get_filename_component(_dir ${target} DIRECTORY)
    if(_name STREQUAL target_file_name)
        set(direct_target True)
    else()
        set(direct_target False)
    endif()

    message(STATUS ">>> [fixup_win32_target:${_name}]  dir: ${_dir}")
    read_direct_dependencies(_deps ${target})

    #Helper function to do the copy and recursion. We recuse whenever we copy.
    #Recursion happens on the copied library location so that it's dependencies are found as they would be when it
    # is loaded from the new directory (vs. the old one).
    macro(_do_copy_recurse)
        execute_process(COMMAND cp ${fitem} ${lib_copy_dest})
        message(STATUS "  &&& >>> Copying [Build Tree]:  ${fitem} --> ${lib_copy_dest}")
        unset(fitem CACHE)
        fixup_win32_target(${lib_copy_dest}/${_dep})
    endmacro()

    #May have to recurse on already copied libraries for build tree-fixups.
    macro(_do_recurse)
        set(_recurse_item ${fitem})
        unset(fitem CACHE)
        fixup_win32_target(${_recurse_item})
        unset(_recurse_item)
    endmacro()

    foreach(_dep IN LISTS _deps)
        set(msg_hdr "{Dep:${_dep}}")
        get_filename_component(_dep_base_name ${_dep} NAME_WE)
        #check if dep_base_name is in provided_libs
        if(provided_libs)
            string(TOLOWER ${_dep_base_name} check_name)
            if(${check_name} IN_LIST provided_libs)
                message(STATUS "  *** ${msg_hdr}: Vendor provided library name: ${_dep_base_name}")
                continue()
            endif()
        endif()

        #Find in vendor provided_libs only for direct dependencies
        if(direct_target AND provided_lib_dirs)
            find_file(fitem ${_dep} PATHS ${provided_lib_dirs} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
            if(fitem)
                get_filename_component(resolved_dir ${fitem} DIRECTORY)
                message(STATUS "  *** ${msg_hdr}: In vendor provided lib dir: ${resolved_dir}")
                unset(fitem CACHE)
                continue()
            endif()
        endif()

        #check if target is in lib_copy_dest (COPY_DESTINATION) already - Do not copy
        find_file(fitem ${_dep} PATHS ${lib_copy_dest} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if(fitem)
            message(STATUS "  --- ${msg_hdr}: Exists at lib copy dest: ${lib_copy_dest}")
            unset(fitem CACHE)
            continue()
        endif()

        #target_link_libraries
        if(direct_target AND target_link_libraries)
            find_file(fitem ${_dep} PATHS ${target_link_libraries} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
            if(fitem)
                get_filename_component(resolved_dir ${fitem} DIRECTORY)
                message(STATUS "  +++ ${msg_hdr}: Exists under target link libraries at: ${resolved_dir}")
                _do_copy_recurse()
                continue()
            endif()
        endif()

        #install_prefix
        find_file(fitem ${_dep} PATHS ${install_prefix} PATH_SUFFIXES ${default_library_search_suffixs} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if(fitem)
            get_filename_component(resolved_dir ${fitem} DIRECTORY)
            message(STATUS "  +++ ${msg_hdr}: Exists under install prefix at: ${resolved_dir}")
            _do_copy_recurse()
            continue()
        endif()

        #staging_prefix
        if(staging_prefix)
            find_file(fitem ${_dep} PATHS ${staging_prefix} PATH_SUFFIXES ${default_library_search_suffixs} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
            if(fitem)
                get_filename_component(resolved_dir ${fitem} DIRECTORY)
                message(STATUS "  +++ ${msg_hdr}: Exists under staging prefix at: ${resolved_dir}")
                _do_copy_recurse()
                continue()
            endif()
        endif()

        #sysroot
        if(sysroot)
            find_file(fitem ${_dep} PATHS ${sysroot} PATH_SUFFIXES ${default_library_search_suffixs} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
            if(fitem)
                get_filename_component(resolved_dir ${fitem} DIRECTORY)
                message(STATUS "  +++ ${msg_hdr}: Exists under sysroot prefix at: ${resolved_dir}")
                _do_copy_recurse()
                continue()
            endif()
        endif()

        #SEARCH_LIB_DIRS
        if(search_lib_dirs)
            find_file(fitem ${_dep} PATHS ${search_lib_dirs} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
            if(fitem)
                get_filename_component(resolved_dir ${fitem} DIRECTORY)
                message(STATUS "  +++ ${msg_hdr}: Exists under search_lib_dirs at: ${resolved_dir}")
                _do_copy_recurse()
                continue()
            endif()
        endif()

        find_file(fitem ${_dep} PATHS @CMAKE_FIND_ROOT_PATH@ PATH_SUFFIXES ${default_library_search_suffixs} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if(fitem)
            get_filename_component(resolved_dir ${fitem} DIRECTORY)
            message(STATUS "  +++ ${msg_hdr}: Exists under CMAKE_FIND_ROOT_PATH at: ${resolved_dir}")
            _do_copy_recurse()
            continue()
        endif()

        #Final check for provided libs on WIN32 for indirect dependencies that were skipped earlier
        if(provided_lib_dirs AND NOT direct_dependency)
            find_file(fitem ${_dep} PATHS ${provided_lib_dirs} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH) #Find in vendor provided_libs
            if(fitem)
                get_filename_component(resolved_dir ${fitem} DIRECTORY)
                message(STATUS "  --- ${msg_hdr}: Indirect dependency of ${target_file_name} only found In vendor provided lib dir: ${resolved_dir}")
                unset(fitem CACHE)
                continue()
            endif()
        endif()

        if(direct_dependency AND TARGET ${fixup_target})

        endif()

        message(FATAL_ERROR "  XXX ${msg_hdr}: Could not find dependency ${_dep} of target ${_name} from dir:${_dir}")
    endforeach()
    message(STATUS "  ===> [fixup_win32_target:${_name}] Complete.")
endfunction()

set_property(GLOBAL PROPERTY FIXUP_COMPLETE_TARGETS)
if(target_os STREQUAL "UNIX")
    if(parent_lib)
        read_rpath(_parent_runpath ${parent_lib} RUNPATH)
        read_rpath(_parent_rpath ${parent_lib} RPATH)
        if(_parent_runpath)
            fixup_unix_target(${target_build_file})
        else()
            fixup_unix_target(${target_build_file} ${_parent_rpath})
        endif()
    else()
        fixup_unix_target(${target_build_file})
    endif()
else()
    fixup_win32_target(${target_build_file})
endif()
